description: |
  - üîç Detect which actors have modified contracts
  - üì¶ Package contracts per actor
  - üöÄ Publish updated artifacts to GitHub Packages
  - üì£ Notify target repositories via repository_dispatch

inputs:
  pat:
    description: "GitHub Personal Access Token (PAT) with repo & packages:write permissions."
    required: true
  repos:
    description: |
      List of repositories to notify when new actor contracts are published.
      Format: YAML or JSON array (e.g. ["org/repo1", "org/repo2"])
    required: true
  event:
    description: "Repository dispatch event type name."
    default: "contracts_published"

runs:
  using: composite
  steps:
    # ----------------------------------
    # üß© Setup environment
    #
    # Pulls repository code to analyze recent changes.
    #
    # Installs required CLI tools:
    # - yq / jq for parsing YAML & JSON
    # - curl for API calls
    # - zip for packaging artifacts
    # - xmllint for extracting Maven metadata
    #
    # Creates working directories for temporary files and build artifacts.
    # ----------------------------------
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup tooling
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y yq jq curl zip libxml2-utils

    - name: Prepare directories
      shell: bash
      run: mkdir -p build && mkdir -p tmp

    # ----------------------------------
    # üîç Scan ownership + detect changes
    #
    # Compares the last two commits to find modified contract files.
    # Reads `ownership.yml` in each use case directory to map files to actors.
    # For each actor:
    #   - Determines current version from Maven metadata.
    #   - Increments patch version if any linked files changed.
    #   - Saves results in a CSV file (`tmp/version_map.csv`):
    #       Actor,OldVersion,NewVersion,Changed
    # Encodes the CSV as BASE64 and exports it to $GITHUB_ENV as VERSION_MAP.
    # ----------------------------------
    - name: Detect changed actors
      id: detect
      shell: bash
      run: |
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^contracts/' || true)
        echo "Changed files: $CHANGED_FILES"
        echo "Actor,OldVersion,NewVersion,Changed" > tmp/version_map.csv
        declare -A ACTOR_FILES
        for uc_dir in contracts/*/; do
          [ -f "${uc_dir}ownership.yml" ] || continue
          UC=$(yq -r '.shared.usecase' "${uc_dir}/ownership.yml")
          yq -r '.events[] | @base64' "${uc_dir}/ownership.yml" | while read -r ev; do
            _jq() { echo ${ev} | base64 --decode | jq -r ${1}; }
            FILE=$(_jq '.file')
            PRODUCER=$(_jq '.producer')
            CONSUMERS=$(_jq '.consumers[]?')
            for actor in $PRODUCER $CONSUMERS; do
              ACTOR_FILES["$actor"]+="${uc_dir}${FILE} "
            done
          done
          yq -r '.openapi[] | @base64' "${uc_dir}/ownership.yml" | while read -r op; do
            _jq() { echo ${op} | base64 --decode | jq -r ${1}; }
            ACTOR=$(_jq '.service')
            SPEC=$(_jq '.spec')
            ACTOR_FILES["$ACTOR"]+="${uc_dir}${SPEC} "
          done
        done
        for actor in "${!ACTOR_FILES[@]}"; do
          META_URL="https://maven.pkg.github.com/wliamp/contracts-pps/io/github/wliamp/contracts/${actor}/maven-metadata.xml"
          LATEST=$(curl -s -u "${{ github.actor }}:${{ inputs.pat }}" "$META_URL" \
            | xmllint --xpath "string(//metadata/versioning/latest)" - 2>/dev/null || echo "0.0.0")
          IFS='.' read -r MA MIN PA <<< "$LATEST"
          CHANGED=false
          for f in ${ACTOR_FILES[$actor]}; do
            if echo "$CHANGED_FILES" | grep -q "$f"; then CHANGED=true; fi
          done
          if [ "$CHANGED" = true ]; then
            PA=$((PA+1)); [ $PA -gt 9 ] && PA=0 && MIN=$((MIN+1))
            VER="${MA}.${MIN}.${PA}"
            echo "üÜô $actor changed ‚Üí $LATEST ‚Üí $VER"
          else
            VER="$LATEST"
          fi
          echo "$actor,$LATEST,$VER,$CHANGED" >> tmp/version_map.csv
        done
        echo "VERSION_MAP=$(base64 -w0 tmp/version_map.csv)" >> $GITHUB_ENV

    # ----------------------------------
    # üì¶ Package per Actor
    #
    # Decodes version map and loops through all changed actors.
    # For each changed actor:
    #   - Collects relevant contract/event/spec files from all use cases.
    #   - Copies them into `build/<actor>/...`.
    #   - Compresses the directory as `build/<actor>-<version>.zip`.
    # ----------------------------------
    - name: Package actors
      id: package
      shell: bash
      run: |
        echo "$VERSION_MAP" | base64 -d > tmp/version_map.csv
        while IFS=',' read -r ACTOR OLDVER NEWVER CHANGED; do
          [ "$CHANGED" != "true" ] && continue
          PKG_DIR="build/${ACTOR}"
          mkdir -p "$PKG_DIR"
          for uc_dir in contracts/*/; do
            [ -f "${uc_dir}ownership.yml" ] || continue
            FILES=$(yq -r \
              ".events[] | select(.producer == \"$ACTOR\" or (.consumers[]? == \"$ACTOR\")) | .file" "${uc_dir}/ownership.yml")
            FILES+=$'\n'$(yq -r \
              ".openapi[] | select(.service == \"$ACTOR\") | .spec" "${uc_dir}/ownership.yml")
            for f in $FILES; do
              [ -f "${uc_dir}${f}" ] && mkdir -p "${PKG_DIR}/${uc_dir##*/}/$(dirname "$f")" && cp "${uc_dir}${f}" "${PKG_DIR}/${uc_dir##*/}/$f"
            done
          done
          cd build && zip -r "${ACTOR}-${NEWVER}.zip" "$ACTOR" >/dev/null && cd - >/dev/null
        done

    # ----------------------------------
    # üöÄ Publish changed actors
    #
    # Iterates through version map.
    # For each changed actor:
    #   - Publishes the corresponding ZIP artifact to GitHub Packages.
    #   - Uses Gradle with parameters:
    #       -PartifactFile, -PartifactId, -Pversion
    # ----------------------------------
    - name: Publish actor packages
      shell: bash
      env:
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TOKEN: ${{ inputs.pat }}
      run: |
        echo "$VERSION_MAP" | base64 -d > tmp/version_map.csv
        while IFS=',' read -r ACTOR OLDVER NEWVER CHANGED; do
          [ "$CHANGED" != "true" ] && continue
          FILE="build/${ACTOR}-${NEWVER}.zip"
          echo "üöÄ Publishing $FILE"
          ./gradlew publish -PartifactFile="$FILE" -PartifactId="$ACTOR" -Pversion="$NEWVER"
        done < tmp/version_map.csv

    # ----------------------------------
    # üì£ Notification
    #
    # For each repository in `inputs.repos`:
    #   - Sends a `repository_dispatch` event (`inputs.event`).
    #   - Includes payload:
    #       actor: Actor name
    #       version: New version
    #       artifact: ZIP filename
    #       source_repo: Origin repository
    #       run_id: Current workflow run
    # Allows dependent repositories to trigger follow-up workflows (e.g. sync, deploy).
    # ----------------------------------
    - name: Notify target repos
      if: success()
      shell: bash
      run: |
        echo "$VERSION_MAP" | base64 -d > tmp/version_map.csv
        echo "${{ inputs.repos }}" | yq -r '.[]' | while read -r repo; do
          while IFS=',' read -r ACTOR OLDVER NEWVER CHANGED; do
            [ "$CHANGED" != "true" ] && continue
            echo "üîî Dispatch $repo ‚Üê $ACTOR-$NEWVER"
            curl -s -X POST \
              -H "Authorization: Bearer ${{ inputs.pat }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${repo}/dispatches" \
              -d "{\"event_type\": \"${{ inputs.event }}\", \"client_payload\": {\"actor\": \"$ACTOR\", \"version\": \"$NEWVER\", \"artifact\": \"${ACTOR}-${NEWVER}.zip\", \"source_repo\": \"${{ github.repository }}\", \"run_id\": \"${{ github.run_id }}\"}}" \
              | jq -r '.message? // "‚úÖ OK"' || echo "‚ö†Ô∏è Failed $repo"
          done < tmp/version_map.csv
        done
